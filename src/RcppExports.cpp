// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mphDensity2
double mphDensity2(cx_double t1, cx_double t2, cx_vec eta, cx_vec beta, vec alpha, mat U, mat R);
RcppExport SEXP _inverseLaplace_mphDensity2(SEXP t1SEXP, SEXP t2SEXP, SEXP etaSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP USEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< cx_double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< cx_double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< cx_vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< cx_vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< mat >::type U(USEXP);
    Rcpp::traits::input_parameter< mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(mphDensity2(t1, t2, eta, beta, alpha, U, R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_inverseLaplace_mphDensity2", (DL_FUNC) &_inverseLaplace_mphDensity2, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_inverseLaplace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
